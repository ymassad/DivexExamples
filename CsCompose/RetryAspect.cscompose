using System;
using DIVEX.Core;
using static DIVEX.Core.DivexUtils;

[DivexCompose]
public static partial class Program
{
  	public static TResult Retry<TResult>(
      Func<TResult> action, int maxRuns)
    {
        for(int i = 0 ; ; i++)
        {
            try
            {
                Console.WriteLine("Attempting Run #" + i);
                var result = action();
                Console.WriteLine("Run #" + i + " is successful");
              	return result;
            }
            catch
            {
                Console.WriteLine("Run #" + i + " failed");
                if(i ==  maxRuns - 1)
                  throw;
            }
        }
    }
  
    static int state1 = 0;
    public static int Calculate(int a, int b)
    {
    	if(state1++ < 2) //Mimic failure the first two times
        	throw new Exception();

    	return a + b;
    }

    static int state2 = 0;
    public static void CalculateVoidReturning(int a, int b)
    {
    	if(state2++ < 1) //Mimic failure the first time
        	throw new Exception();

    	Console.WriteLine(a + b);
    }     

    public static void Main()
    {
        var retry = Retry[+3];
        
        var calculateWithRetries = retry[Calculate];
        Console.WriteLine(calculateWithRetries(1, 2));
        
        var calcuateVoidReturningWithRetries = retry[CalculateVoidReturning];
        calcuateVoidReturningWithRetries(3,4);
    }
}
/*
Attempting Run #0
Run #0 failed
Attempting Run #1
Run #1 failed
Attempting Run #2
Run #2 is successful
3
Attempting Run #0
Run #0 failed
Attempting Run #1
7
Run #1 is successful

*/
